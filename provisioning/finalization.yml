# ansible-playbook -u vagrant -i 192.168.56.100, provisioning/finalization.yml
- name: Finalize initialization of Kubernetes cluster
  hosts: all
  become: yes
  become_user: vagrant
  vars:
    venv_path: /opt/ansible-venv
    dashboard_admin_yaml: | 
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: admin-user
        namespace: kubernetes-dashboard
      ---
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: admin-user
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
      - kind: ServiceAccount
        name: admin-user
        namespace: kubernetes-dashboard
    dashboard_ingress_yaml: |
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: dashboard-ingress
        namespace: kubernetes-dashboard
        annotations:
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          # nginx.ingress.kubernetes.io/secure-backends: "true"
          # nginx.ingress.kubernetes.io/ssl-redirect: "true"
          # nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      spec:
        ingressClassName: nginx
        rules:
          - host: "dashboard.local"
            http:
              paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: kubernetes-dashboard-kong-proxy
                      port:
                        number: 443

  tasks:
    # intermezzo: create venv for kubernetes.core ansible
    # TODO: move entire block to general.yaml or ctrl.yaml since we need it for flannel
    - name: Set up venv for kubernetes.core
      become_user: root
      block:
      - name: Ensure Python venv module is installed
        ansible.builtin.package:
          name: python3-venv
          state: present
        
      - name: Create virtual environment
        ansible.builtin.command: python3 -m venv --upgrade {{ venv_path }}
        args:
          creates: "{{ venv_path }}/bin/activate"

      - name: Upgrade pip
        pip: 
          name: pip
          state: latest
          virtualenv: "{{ venv_path }}"
          virtualenv_command: python3 -m venv

      - name: Upgrade setuptools
        pip: 
          name: setuptools
          state: latest
          virtualenv: "{{ venv_path }}"
          virtualenv_command: python3 -m venv

      - name: Install kubernetes client in venv
        ansible.builtin.pip:
          name: kubernetes
          virtualenv: "{{ venv_path }}"
          virtualenv_command: python3 -m venv

    # Step 20 - Install MetalLB
    - name: Download MetalLB yaml file
      get_url:
        url: https://raw.githubusercontent.com/metallb/metallb/v0.14.9/config/manifests/metallb-native.yaml
        dest: "/tmp/metallb-native.yaml"

    - name: Apply MetalLB CRDs
      kubernetes.core.k8s:
        state: present
        src: "/tmp/metallb-native.yaml"
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python"

    - name: Waiting for MetalLB controller pod to be ready
      kubernetes.core.k8s_info:
        kind: Pod
        wait: true
        namespace: metallb-system
        label_selectors:
          - app=metallb
          - component=controller
        wait_sleep: 5
        wait_timeout: 150
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python"

    - name: Configure IPAddressPool
      copy:
        dest: /tmp/metallb-pool.yaml
        content: |
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            namespace: metallb-system
            name: default-pool
          spec:
            addresses:
              - 192.168.56.90-192.168.56.99

    - name: Apply IPAddressPool
      # command: kubectl apply -f /tmp/metallb-pool.yaml
      kubernetes.core.k8s:
        state: present
        src: "/tmp/metallb-pool.yaml"
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python"

    - name: Configure L2Advertisement
      copy:
        dest: /tmp/metallb-l2.yaml
        content: |
          apiVersion: metallb.io/v1beta1
          kind: L2Advertisement
          metadata:
            namespace: metallb-system
            name: l2
          spec: {}

    - name: Apply L2Advertisement
      #command: kubectl apply -f /tmp/metallb-l2.yaml
      kubernetes.core.k8s:
        state: present
        src: "/tmp/metallb-l2.yaml"
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python"

    # Step 21: Install Nginx Ingress Controller
    - name: "Add Nginx Ingress repository"
      kubernetes.core.helm_repository:
        name: ingress-nginx
        repo_url: https://kubernetes.github.io/ingress-nginx
        state: present

    - name: "Install Nginx Ingress controller chart"
      kubernetes.core.helm:
        name: ingress-nginx
        chart_ref: ingress-nginx/ingress-nginx
        release_namespace: ingress-nginx
        create_namespace: yes
        state: present
        values:
          controller:
            service:
              loadBalancerIP: 192.168.56.91

    # Step 22: Install Kubernetes Dashboard
    - name: "Add Kubernetes dashboard repository"
      kubernetes.core.helm_repository:
        name: "kubernetes-dashboard"
        repo_url: https://kubernetes.github.io/dashboard/
        state: present

    - name: "Install Kubernetes dashboard chart"
      kubernetes.core.helm:
        name: kubernetes-dashboard
        chart_ref: "kubernetes-dashboard/kubernetes-dashboard"
        release_namespace: kubernetes-dashboard 
        create_namespace: yes        
        state: present       

    - name: Create 'admin user config' (ServiceAccount & ClusterRoleBinding)
      copy:
        dest: /tmp/dashboard-admin.yaml
        content: "{{ dashboard_admin_yaml }}"
          
    - name: Apply admin user config
      # command: kubectl apply -f /tmp/dashboard-admin.yaml
      kubernetes.core.k8s:
        state: present
        src: "/tmp/dashboard-admin.yaml"
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python"

    - name: Create dashboard Ingress
      copy:
        dest: /tmp/dashboard-ingress.yaml
        content: "{{ dashboard_ingress_yaml }}"

    - name: Waiting for dashboard ingress to be ready
      kubernetes.core.k8s_info:
        kind: Pod
        wait: true
        namespace: ingress-nginx
        label_selectors:
          - app.kubernetes.io/component=controller
        wait_sleep: 5
        wait_timeout: 150
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python"

    - name: Apply dashboard ingress
      # command: kubectl apply -f /tmp/dashboard-ingress.yaml
      kubernetes.core.k8s:
        state: present
        src: "/tmp/dashboard-ingress.yaml"
      vars:
        ansible_python_interpreter: "{{ venv_path }}/bin/python"

    - name: Generate dashboard admin token
      command: kubectl -n kubernetes-dashboard create token admin-user
      register: dashboard_token
      changed_when: false

    - name: Show dashboard login token and next steps
      debug:
        msg: 
          - "Kubernetes dashboard ready. Next steps:"
          - ">> Add the line '192.168.56.91 dashboard.local' to your host's hostfile"
          - ">> Go to https://dashboard.local and enter the following token: {{ dashboard_token.stdout }}"

    # Step 23: Install Istio
    - name: Download Istio 1.25.2
      get_url:
        url: https://github.com/istio/istio/releases/download/1.25.2/istio-1.25.2-linux-amd64.tar.gz
        dest: /tmp/istio.tar.gz
        mode: '0644'
      become: true

    - name: Extract Istio
      ansible.builtin.unarchive:
        src: /tmp/istio.tar.gz
        dest: /home/vagrant/
        remote_src: yes
      become: true
      args:
        creates: /home/vagrant/istio-1.25.2/manifests

    - name: Add istioctl to PATH
      lineinfile:
        path: /home/vagrant/.bashrc
        line: 'export PATH=$PATH:/home/vagrant/istio-1.25.2/bin'
        insertafter: EOF
        state: present

    - name: Run istioctl install (demo profile)
      shell: |
        istioctl install --set profile=demo -y
      args:
        creates: /home/vagrant/istio-1.25.2/manifests

