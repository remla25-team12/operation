apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: {{ include "myapp.fullname" . }}-gateway
spec:
  selector:
    app: istio-ingressgateway
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - {{ .Values.ingress.host }}
---
# Sticky Sessions + Traffic split
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: {{ include "myapp.fullname" . }}-app-vs
spec:
  hosts:
  - {{ .Values.ingress.host }}
  gateways:
  - {{ include "myapp.fullname" . }}-gateway
  http:
  # Sticky sessions
  - match:
    - headers:
        x-newvers:
          exact: "true"
    route:
    - destination:
        host: {{ include "myapp.fullname" . }}-app
        subset: v2
  - match:
    - headers:
        x-newvers:
          exact: "false"
    route:
    - destination:
        host: {{ include "myapp.fullname" . }}-app
        subset: v1
  # Weighted traffic split
  - route:
    - destination:
        host: {{ include "myapp.fullname" . }}-app
        subset: v1
      weight: {{ .Values.istio.appTrafficSplit.v1Weight }}
    - destination:
        host: {{ include "myapp.fullname" . }}-app
        subset: v2
      weight: {{ .Values.istio.appTrafficSplit.v2Weight }}
---
# app subsets
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: {{ include "myapp.fullname" . }}-app-dr
spec:
  host: {{ include "myapp.fullname" . }}-app
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2
---
# model-service subsets
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: {{ include "myapp.fullname" . }}-model-dr
spec:
  host: {{ include "myapp.fullname" . }}-model
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2
---
# Routing app traffic to model-service according to v1/v2 subsets
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: {{ include "myapp.fullname" . }}-model-vs
spec:
  hosts:
    - {{ include "myapp.fullname" . }}-model
  http:
    - match:
        - sourceLabels:
            version: v2
      route:
        - destination:
            host: {{ include "myapp.fullname" . }}-model
            subset: v2
    - route:  # default route (for v1 and others)
        - destination:
            host: {{ include "myapp.fullname" . }}-model
            subset: v1
#
#---
#apiVersion: v1
#kind: Service
#metadata:
#  name: prometheus
#  namespace: istio-system
#spec:
#  type: ClusterIP
#  ports:
#  - port: 9090
#    targetPort: 9090
#  selector:
#    app.kubernetes.io/name: prometheus

---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: filter-ratelimit
  namespace: istio-system
spec:
  workloadSelector:
    # select by label in the same namespace
    labels:
      istio: ingressgateway
  configPatches:
    # The Envoy config you want to modify
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: INSERT_BEFORE
        # Adds the Envoy Rate Limit Filter in HTTP filter chain.
        value:
          name: envoy.filters.http.ratelimit
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
            # domain can be anything! Match it to the ratelimter service config
            domain: ratelimit
            failure_mode_deny: true
            timeout: 10s
            rate_limit_service:
              grpc_service:
                envoy_grpc:
                  cluster_name: outbound|8081||ratelimit.default.svc.cluster.local
                  authority: ratelimit.default.svc.cluster.local
              transport_api_version: V3

---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: filter-ratelimit-svc
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      istio: ingressgateway
  configPatches:
    - applyTo: VIRTUAL_HOST
      match:
        context: GATEWAY
        routeConfiguration:
          vhost:
            name: ""
            route:
              action: ANY
      patch:
        operation: MERGE
        # Applies the rate limit rules.
        value:
          rate_limits:
            - actions: # Per IP
              - request_headers:
                  header_name: ":path"
                  descriptor_key: "PATH"
              - remote_address: {}
                descriptor_key: "IP"
            - actions: # GLOBAL
                - request_headers:
                    header_name: ":path"
                    descriptor_key: "PATH"